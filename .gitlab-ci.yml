# load docker image & start docker engine
image: docker:19.03.1
services:
  - docker:19.03.1-dind

stages:
  - build
  - test

build_zap:
  stage: build
  before_script:
    - cd api-scanning
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - docker build zap -t $CI_REGISTRY/$CI_PROJECT_PATH:zap-$CI_COMMIT_SHA
    - docker push $CI_REGISTRY/$CI_PROJECT_PATH:zap-$CI_COMMIT_SHA

build_jmeter:
  stage: build
  before_script:
    - cd api-scanning
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - docker build jmeter -t $CI_REGISTRY/$CI_PROJECT_PATH:jmeter-$CI_COMMIT_SHA
    - docker push $CI_REGISTRY/$CI_PROJECT_PATH:jmeter-$CI_COMMIT_SHA

test:
  stage: test
  image:
    name: docker/compose
  before_script:
    - cd api-scanning
    - export ZAP_URL=$CI_REGISTRY/$CI_PROJECT_PATH:zap-$CI_COMMIT_SHA
    - export JMETER_URL=$CI_REGISTRY/$CI_PROJECT_PATH:jmeter-$CI_COMMIT_SHA
    - "export PREFIX='image: '"
    - echo $JMETER_URL
    - echo $ZAP_URL
    - sed -i "s|build.*$|$PREFIX$ZAP_URL| docker-compose.yml'
    - sed -i "s|build.*$|$PREFIX$JMETER_URL| docker-compose.yml'
  script:
    - cat docker-compose.yml
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker-compose up
  # - python3 parse_results.py 
  artifacts:
    paths:
      - jmeter/results/jmeter
      - jmeter/results/zap
