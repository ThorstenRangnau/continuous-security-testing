[
  {
    'sourceid': '3',
    'other': '',
    'method': 'GET',
    'evidence': 'Set-Cookie: JSESSIONID',
    'pluginId': '10010',
    'cweid': '16',
    'confidence': 'Medium',
    'wascid': '13',
    'description': 'A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.',
    'messageId': '15',
    'url': 'http://webgoat:8080/WebGoat/',
    'reference': 'http://www.owasp.org/index.php/HttpOnly',
    'solution': 'Ensure that the HttpOnly flag is set for all cookies.',
    'alert': 'Cookie No HttpOnly Flag',
    'param': 'JSESSIONID',
    'attack': '',
    'name': 'Cookie No HttpOnly Flag',
    'risk': 'Low',
    'id': '0'
  },
  {
    'sourceid': '3',
    'other': 'The origin domain used for comparison was: \r\nwebgoat\r\nJSESSIONID=rlGL-Epw9nqMzslP8033OPLEH87f3aiEaqmfPmdO\r\n',
    'method': 'GET',
    'evidence': '',
    'pluginId': '90033',
    'cweid': '565',
    'confidence': 'Low',
    'wascid': '15',
    'description': 'Cookies can be scoped by domain or path. This check is only concerned with domain scope.The domain scope applied to a cookie determines which domains can access it. For example, a cookie can be scoped strictly to a subdomain e.g. www.nottrusted.com, or loosely scoped to a parent domain e.g. nottrusted.com. In the latter case, any subdomain of nottrusted.com can access the cookie. Loosely scoped cookies are common in mega-applications like google.com and live.com. Cookies set from a subdomain like app.foo.bar are transmitted only to that domain by the browser. However, cookies scoped to a parent-level domain may be transmitted to the parent, or any subdomain of the parent.',
    'messageId': '15',
    'url': 'http://webgoat:8080/WebGoat/',
    'reference': 'https://tools.ietf.org/html/rfc6265#section-4.1\nhttps://www.owasp.org/index.php/Testing_for_cookies_attributes_(OTG-SESS-002)\nhttp://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_cookies',
    'solution': 'Always scope cookies to a FQDN (Fully Qualified Domain Name).',
    'alert': 'Loosely Scoped Cookie',
    'param': '',
    'attack': '',
    'name': 'Loosely Scoped Cookie',
    'risk': 'Informational',
    'id': '1'
  },
  {
    'sourceid': '3',
    'other': '',
    'method': 'GET',
    'evidence': 'Set-Cookie: JSESSIONID',
    'pluginId': '10054',
    'cweid': '16',
    'confidence': 'Medium',
    'wascid': '13',
    'description': "A cookie has been set without the SameSite attribute, which means that the cookie can be sent as a result of a 'cross-site' request. The SameSite attribute is an effective counter measure to cross-site request forgery, cross-site script inclusion, and timing attacks.",
    'messageId': '15',
    'url': 'http://webgoat:8080/WebGoat/',
    'reference': 'https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site',
    'solution': "Ensure that the SameSite attribute is set to either 'lax' or ideally 'strict' for all cookies.",
    'alert': 'Cookie Without SameSite Attribute',
    'param': 'JSESSIONID',
    'attack': '',
    'name': 'Cookie Without SameSite Attribute',
    'risk': 'Low',
    'id': '2'
  },
  {
    'sourceid': '3',
    'other': 'No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret] was found in the following HTML form: [Form 1: "exampleInputEmail1" "exampleInputPassword1" ].',
    'method': 'GET',
    'evidence': '<form action="/WebGoat/login" method=\'POST\' style="width: 200px;">',
    'pluginId': '10202',
    'cweid': '352',
    'confidence': 'Medium',
    'wascid': '9',
    'description': "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.",
    'messageId': '16',
    'url': 'http://webgoat:8080/WebGoat/login',
    'reference': 'http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html',
    'solution': 'Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.',
    'alert': 'Absence of Anti-CSRF Tokens',
    'param': '',
    'attack': '',
    'name': 'Absence of Anti-CSRF Tokens',
    'risk': 'Low',
    'id': '3'
  },
  {
    'sourceid': '3',
    'other': 'The origin domain used for comparison was: \r\nwebgoat\r\nJSESSIONID=XalkFZu0y9yysm_X5VyOUps91Eb3KmWcbp91kFAh\r\n',
    'method': 'GET',
    'evidence': '',
    'pluginId': '90033',
    'cweid': '565',
    'confidence': 'Low',
    'wascid': '15',
    'description': 'Cookies can be scoped by domain or path. This check is only concerned with domain scope.The domain scope applied to a cookie determines which domains can access it. For example, a cookie can be scoped strictly to a subdomain e.g. www.nottrusted.com, or loosely scoped to a parent domain e.g. nottrusted.com. In the latter case, any subdomain of nottrusted.com can access the cookie. Loosely scoped cookies are common in mega-applications like google.com and live.com. Cookies set from a subdomain like app.foo.bar are transmitted only to that domain by the browser. However, cookies scoped to a parent-level domain may be transmitted to the parent, or any subdomain of the parent.',
    'messageId': '26',
    'url': 'http://webgoat:8080/WebGoat/',
    'reference': 'https://tools.ietf.org/html/rfc6265#section-4.1\nhttps://www.owasp.org/index.php/Testing_for_cookies_attributes_(OTG-SESS-002)\nhttp://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_cookies',
    'solution': 'Always scope cookies to a FQDN (Fully Qualified Domain Name).',
    'alert': 'Loosely Scoped Cookie',
    'param': '',
    'attack': '',
    'name': 'Loosely Scoped Cookie',
    'risk': 'Informational',
    'id': '5'
  },
  {
    'sourceid': '3',
    'other': '42857143, which evaluates to: 1971-05-12 00:45:43',
    'method': 'GET',
    'evidence': '42857143',
    'pluginId': '10096',
    'cweid': '200',
    'confidence': 'Low',
    'wascid': '13',
    'description': 'A timestamp was disclosed by the application/web server - Unix',
    'messageId': '38',
    'url': 'http://webgoat:8080/WebGoat/plugins/bootstrap/css/bootstrap.min.css',
    'reference': 'https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\nhttp://projects.webappsec.org/w/page/13246936/Information%20Leakage',
    'solution': 'Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.',
    'alert': 'Timestamp Disclosure - Unix',
    'param': '',
    'attack': '',
    'name': 'Timestamp Disclosure - Unix',
    'risk': 'Informational',
    'id': '8'
  },
  {
    'sourceid': '3',
    'other': '66666667, which evaluates to: 1972-02-11 14:31:07',
    'method': 'GET',
    'evidence': '66666667',
    'pluginId': '10096',
    'cweid': '200',
    'confidence': 'Low',
    'wascid': '13',
    'description': 'A timestamp was disclosed by the application/web server - Unix',
    'messageId': '38',
    'url': 'http://webgoat:8080/WebGoat/plugins/bootstrap/css/bootstrap.min.css',
    'reference': 'https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\nhttp://projects.webappsec.org/w/page/13246936/Information%20Leakage',
    'solution': 'Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.',
    'alert': 'Timestamp Disclosure - Unix',
    'param': '',
    'attack': '',
    'name': 'Timestamp Disclosure - Unix',
    'risk': 'Informational',
    'id': '14'
  },
  {
    'sourceid': '3',
    'other': '33333333, which evaluates to: 1971-01-21 19:15:33',
    'method': 'GET',
    'evidence': '33333333',
    'pluginId': '10096',
    'cweid': '200',
    'confidence': 'Low',
    'wascid': '13',
    'description': 'A timestamp was disclosed by the application/web server - Unix',
    'messageId': '38',
    'url': 'http://webgoat:8080/WebGoat/plugins/bootstrap/css/bootstrap.min.css',
    'reference': 'https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\nhttp://projects.webappsec.org/w/page/13246936/Information%20Leakage',
    'solution': 'Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.',
    'alert': 'Timestamp Disclosure - Unix',
    'param': '',
    'attack': '',
    'name': 'Timestamp Disclosure - Unix',
    'risk': 'Informational',
    'id': '15'
  },
  {
    'sourceid': '3',
    'other': '80000000, which evaluates to: 1972-07-14 22:13:20',
    'method': 'GET',
    'evidence': '80000000',
    'pluginId': '10096',
    'cweid': '200',
    'confidence': 'Low',
    'wascid': '13',
    'description': 'A timestamp was disclosed by the application/web server - Unix',
    'messageId': '38',
    'url': 'http://webgoat:8080/WebGoat/plugins/bootstrap/css/bootstrap.min.css',
    'reference': 'https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\nhttp://projects.webappsec.org/w/page/13246936/Information%20Leakage',
    'solution': 'Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.',
    'alert': 'Timestamp Disclosure - Unix',
    'param': '',
    'attack': '',
    'name': 'Timestamp Disclosure - Unix',
    'risk': 'Informational',
    'id': '152'
  },
  {
    'sourceid': '3',
    'other': '00000000, which evaluates to: 1970-01-01 00:00:00',
    'method': 'GET',
    'evidence': '00000000',
    'pluginId': '10096',
    'cweid': '200',
    'confidence': 'Low',
    'wascid': '13',
    'description': 'A timestamp was disclosed by the application/web server - Unix',
    'messageId': '38',
    'url': 'http://webgoat:8080/WebGoat/plugins/bootstrap/css/bootstrap.min.css',
    'reference': 'https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\nhttp://projects.webappsec.org/w/page/13246936/Information%20Leakage',
    'solution': 'Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.',
    'alert': 'Timestamp Disclosure - Unix',
    'param': '',
    'attack': '',
    'name': 'Timestamp Disclosure - Unix',
    'risk': 'Informational',
    'id': '153'
  },
  {
    'sourceid': '3',
    'other': 'No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret] was found in the following HTML form: [Form 1: "username" "password" "matchingPassword" "agree" ].',
    'method': 'GET',
    'evidence': '<form class="form-horizontal" action="/WebGoat/register.mvc" method=\'POST\'>',
    'pluginId': '10202',
    'cweid': '352',
    'confidence': 'Medium',
    'wascid': '9',
    'description': "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.",
    'messageId': '44',
    'url': 'http://webgoat:8080/WebGoat/registration',
    'reference': 'http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html',
    'solution': 'Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.',
    'alert': 'Absence of Anti-CSRF Tokens',
    'param': '',
    'attack': '',
    'name': 'Absence of Anti-CSRF Tokens',
    'risk': 'Low',
    'id': '156'
  },
  {
    'sourceid': '3',
    'other': 'No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret] was found in the following HTML form: [Form 1: "username" "password" "matchingPassword" "agree" ].',
    'method': 'POST',
    'evidence': '<form class="form-horizontal" action="/WebGoat/register.mvc" method=\'POST\'>',
    'pluginId': '10202',
    'cweid': '352',
    'confidence': 'Medium',
    'wascid': '9',
    'description': "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.",
    'messageId': '48',
    'url': 'http://webgoat:8080/WebGoat/register.mvc',
    'reference': 'http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html',
    'solution': 'Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.',
    'alert': 'Absence of Anti-CSRF Tokens',
    'param': '',
    'attack': '',
    'name': 'Absence of Anti-CSRF Tokens',
    'risk': 'Low',
    'id': '157'
  },
  {
    'sourceid': '3',
    'other': 'No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret] was found in the following HTML form: [Form 1: "exampleInputEmail1" "exampleInputPassword1" ].',
    'method': 'GET',
    'evidence': '<form action="/WebGoat/login" method=\'POST\' style="width: 200px;">',
    'pluginId': '10202',
    'cweid': '352',
    'confidence': 'Medium',
    'wascid': '9',
    'description': "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.",
    'messageId': '49',
    'url': 'http://webgoat:8080/WebGoat/login?error',
    'reference': 'http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html',
    'solution': 'Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.',
    'alert': 'Absence of Anti-CSRF Tokens',
    'param': '',
    'attack': '',
    'name': 'Absence of Anti-CSRF Tokens',
    'risk': 'Low',
    'id': '158'
  },
  {
    'sourceid': '1',
    'other': "The page results were successfully manipulated using the boolean conditions [agree' AND '1'='1] and [agree' AND '1'='2]\nThe parameter value being modified was NOT stripped from the HTML output for the purposes of the comparison\nData was returned for the original parameter.\nThe vulnerability was detected by successfully restricting the data originally returned, by manipulating the parameter",
    'method': 'POST',
    'evidence': '',
    'pluginId': '40018',
    'cweid': '89',
    'confidence': 'Medium',
    'wascid': '19',
    'description': 'SQL injection may be possible.',
    'messageId': '486',
    'url': 'http://webgoat:8080/WebGoat/register.mvc',
    'reference': 'https://www.owasp.org/index.php/Top_10_2010-A1\nhttps://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet',
    'solution': "Do not trust client side input, even if there is client side validation in place.  \nIn general, type check all data on the server side.\nIf the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by '?'\nIf the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries.\nIf database Stored Procedures can be used, use them.\nDo *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality!\nDo not create dynamic SQL queries using simple string concatenation.\nEscape all data received from the client.\nApply a 'whitelist' of allowed characters, or a 'blacklist' of disallowed characters in user input.\nApply the principle of least privilege by using the least privileged database user possible.\nIn particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection, but minimizes its impact.\nGrant the minimum database access that is necessary for the application.",
    'alert': 'SQL Injection',
    'param': 'agree',
    'attack': "agree' AND '1'='1",
    'name': 'SQL Injection',
    'risk': 'High',
    'id': '159'
  },
  {
    'sourceid': '1',
    'other': '',
    'method': 'POST',
    'evidence': 'javax.servlet.http.HttpServlet.service(HttpServlet.java:523)\\n\\tat',
    'pluginId': '40008',
    'cweid': '472',
    'confidence': 'Medium',
    'wascid': '20',
    'description': 'Parameter manipulation caused an error page or Java stack trace to be displayed.  This indicated lack of exception handling and potential areas for further exploit.',
    'messageId': '992',
    'url': 'http://webgoat:8080/WebGoat/register.mvc',
    'reference': '',
    'solution': 'Identify the cause of the error and fix it.  Do not trust client side input and enforce a tight check in the server side.  Besides, catch the exception properly.  Use a generic 500 error page for internal server error.',
    'alert': 'Parameter Tampering',
    'param': 'matchingPassword',
    'attack': '',
    'name': 'Parameter Tampering',
    'risk': 'Medium',
    'id': '160'
  },
  [
    'http://webgoat:8080/WebGoat/start.mvc',
    'http://webgoat:8080/WebGoat/registration',
    'http://webgoat:8080/WebGoat/',
    'http://webgoat:8080/WebGoat/plugins/bootstrap',
    'http://webgoat:8080/WebGoat/plugins/bootstrap/css',
    'http://webgoat:8080/WebGoat',
    'http://webgoat:8080/robots.txt',
    'http://webgoat:8080/WebGoat/register.mvc',
    'http://webgoat:8080/sitemap.xml',
    'http://webgoat:8080/WebGoat/css/animate.css',
    'http://webgoat:8080/WebGoat/css/font-awesome.min.css',
    'http://webgoat:8080/WebGoat/plugins',
    'http://webgoat:8080/WebGoat/login',
    'http://webgoat:8080/WebGoat/login?error',
    'http://webgoat:8080/WebGoat/css',
    'http://webgoat:8080/WebGoat/css/main.css',
    'http://webgoat:8080/WebGoat/plugins/bootstrap/css/bootstrap.min.css'
  ]
]